import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { Subject, takeUntil } from 'rxjs';
import { HeaderComponent } from '../../layout/header/header';
import { FooterComponent } from '../../layout/footer/footer';
import { AuthService } from '../../core/services/auth.service';
import { Profile, ShippingAddress, UserProfileData } from '../../core/services/supabase.service';

@Component({
  selector: 'app-profile',
  standalone: true,
  imports: [CommonModule, FormsModule, HeaderComponent, FooterComponent],
  templateUrl: './profile.html',
  styleUrls: ['./profile.scss']
})
export class ProfileComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();
  
  // State management
  loading = false;
  error: string | null = null;
  success: string | null = null;
  
  // Profile data
  profile: Profile | null = null;
  addresses: ShippingAddress[] = [];
  
  // Form data
  profileForm = {
    full_name: '',
    email: '',
    phone: '',
    date_of_birth: ''
  };
  
  // Address form
  addressForm = {
    title: '',
    first_name: '',
    last_name: '',
    company: '',
    address_line_1: '',
    address_line_2: '',
    city: '',
    state: '',
    postal_code: '',
    country: '',
    phone: '',
    is_default: false
  };
  
  // UI state
  activeTab: 'personal' | 'addresses' | 'orders' = 'personal';
  showAddressForm = false;
  editingAddressId: string | null = null;
  
  // Address titles for dropdown
  addressTitles = ['Casa', 'Oficina', 'Casa de mis padres', 'Otro'];
  
  // States/Provinces by country
  statesByCountry: { [key: string]: string[] } = {
    'Espa√±a': [
      'Andaluc√≠a', 'Arag√≥n', 'Asturias', 'Baleares', 'Canarias', 'Cantabria',
      'Castilla-La Mancha', 'Castilla y Le√≥n', 'Catalu√±a', 'Ceuta', 'Extremadura',
      'Galicia', 'La Rioja', 'Madrid', 'Melilla', 'Murcia', 'Navarra', 'Pa√≠s Vasco', 'Valencia'
    ],
    'Francia': [
      'Auvergne-Rh√¥ne-Alpes', 'Bourgogne-Franche-Comt√©', 'Bretagne', 'Centre-Val de Loire',
      'Corse', 'Grand Est', 'Hauts-de-France', '√éle-de-France', 'Normandie', 'Nouvelle-Aquitaine',
      'Occitanie', 'Pays de la Loire', 'Provence-Alpes-C√¥te d\'Azur'
    ],
    'Portugal': [
      'Aveiro', 'Beja', 'Braga', 'Bragan√ßa', 'Castelo Branco', 'Coimbra', '√âvora',
      'Faro', 'Guarda', 'Leiria', 'Lisboa', 'Portalegre', 'Porto', 'Santar√©m',
      'Set√∫bal', 'Viana do Castelo', 'Vila Real', 'Viseu', 'Azores', 'Madeira'
    ],
    'Italia': [
      'Abruzzo', 'Basilicata', 'Calabria', 'Campania', 'Emilia-Romagna', 'Friuli-Venezia Giulia',
      'Lazio', 'Liguria', 'Lombardia', 'Marche', 'Molise', 'Piemonte', 'Puglia', 'Sardegna',
      'Sicilia', 'Toscana', 'Trentino-Alto Adige', 'Umbria', 'Valle d\'Aosta', 'Veneto'
    ],
    'Alemania': [
      'Baden-W√ºrttemberg', 'Bayern', 'Berlin', 'Brandenburg', 'Bremen', 'Hamburg',
      'Hessen', 'Mecklenburg-Vorpommern', 'Niedersachsen', 'Nordrhein-Westfalen',
      'Rheinland-Pfalz', 'Saarland', 'Sachsen', 'Sachsen-Anhalt', 'Schleswig-Holstein', 'Th√ºringen'
    ],
    'Reino Unido': [
      'England', 'Scotland', 'Wales', 'Northern Ireland'
    ],
    'Estados Unidos': [
      'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut',
      'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa',
      'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan',
      'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',
      'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio',
      'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota',
      'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia',
      'Wisconsin', 'Wyoming'
    ],
    'Canad√°': [
      'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland and Labrador',
      'Northwest Territories', 'Nova Scotia', 'Nunavut', 'Ontario', 'Prince Edward Island',
      'Quebec', 'Saskatchewan', 'Yukon'
    ],
    'M√©xico': [
      'Aguascalientes', 'Baja California', 'Baja California Sur', 'Campeche', 'Chiapas',
      'Chihuahua', 'Coahuila', 'Colima', 'Durango', 'Guanajuato', 'Guerrero', 'Hidalgo',
      'Jalisco', 'M√©xico', 'Michoac√°n', 'Morelos', 'Nayarit', 'Nuevo Le√≥n', 'Oaxaca',
      'Puebla', 'Quer√©taro', 'Quintana Roo', 'San Luis Potos√≠', 'Sinaloa', 'Sonora',
      'Tabasco', 'Tamaulipas', 'Tlaxcala', 'Veracruz', 'Yucat√°n', 'Zacatecas'
    ],
    'Argentina': [
      'Buenos Aires', 'Catamarca', 'Chaco', 'Chubut', 'C√≥rdoba', 'Corrientes', 'Entre R√≠os',
      'Formosa', 'Jujuy', 'La Pampa', 'La Rioja', 'Mendoza', 'Misiones', 'Neuqu√©n',
      'R√≠o Negro', 'Salta', 'San Juan', 'San Luis', 'Santa Cruz', 'Santa Fe',
      'Santiago del Estero', 'Tierra del Fuego', 'Tucum√°n'
    ],
    'Per√∫': [
      'Amazonas', '√Åncash', 'Apur√≠mac', 'Arequipa', 'Ayacucho', 'Cajamarca', 'Callao',
      'Cusco', 'Huancavelica', 'Hu√°nuco', 'Ica', 'Jun√≠n', 'La Libertad', 'Lambayeque',
      'Lima', 'Loreto', 'Madre de Dios', 'Moquegua', 'Pasco', 'Piura', 'Puno',
      'San Mart√≠n', 'Tacna', 'Tumbes', 'Ucayali'
    ],
    'Chile': [
      'Arica y Parinacota', 'Tarapac√°', 'Antofagasta', 'Atacama', 'Coquimbo', 'Valpara√≠so',
      'Metropolitana de Santiago', 'O\'Higgins', 'Maule', '√ëuble', 'Biob√≠o', 'La Araucan√≠a',
      'Los R√≠os', 'Los Lagos', 'Ays√©n', 'Magallanes y de la Ant√°rtica Chilena'
    ],
    'Colombia': [
      'Amazonas', 'Antioquia', 'Arauca', 'Atl√°ntico', 'Bol√≠var', 'Boyac√°', 'Caldas',
      'Caquet√°', 'Casanare', 'Cauca', 'Cesar', 'Choc√≥', 'C√≥rdoba', 'Cundinamarca',
      'Guain√≠a', 'Guaviare', 'Huila', 'La Guajira', 'Magdalena', 'Meta', 'Nari√±o',
      'Norte de Santander', 'Putumayo', 'Quind√≠o', 'Risaralda', 'San Andr√©s y Providencia',
      'Santander', 'Sucre', 'Tolima', 'Valle del Cauca', 'Vaup√©s', 'Vichada'
    ],
    'Brasil': [
      'Acre', 'Alagoas', 'Amap√°', 'Amazonas', 'Bahia', 'Cear√°', 'Distrito Federal',
      'Esp√≠rito Santo', 'Goi√°s', 'Maranh√£o', 'Mato Grosso', 'Mato Grosso do Sul',
      'Minas Gerais', 'Par√°', 'Para√≠ba', 'Paran√°', 'Pernambuco', 'Piau√≠',
      'Rio de Janeiro', 'Rio Grande do Norte', 'Rio Grande do Sul', 'Rond√¥nia',
      'Roraima', 'Santa Catarina', 'S√£o Paulo', 'Sergipe', 'Tocantins'
    ]
  };

  // Available countries for shipping
  availableCountries = [
    'Espa√±a',
    'Francia',
    'Portugal',
    'Italia',
    'Alemania',
    'Reino Unido',
    'Pa√≠ses Bajos',
    'B√©lgica',
    'Austria',
    'Suiza',
    'Andorra',
    'M√≥naco',
    'Estados Unidos',
    'Canad√°',
    'M√©xico',
    'Argentina',
    'Chile',
    'Colombia',
    'Per√∫',
    'Brasil',
    'Australia',
    'Jap√≥n'
  ];

  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  async ngOnInit() {
    await this.loadProfileData();
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  async loadProfileData() {
    console.log('üîÑ [PROFILE] Iniciando carga de datos del perfil...');
    this.loading = true;
    this.error = null;

    try {
      console.log('üì° [PROFILE] Llamando a getUserProfileData...');
      const { data, error } = await this.authService.getUserProfileData();

      if (error) {
        console.error('‚ùå [PROFILE] Error al cargar datos:', error);
        this.error = 'Error al cargar los datos del perfil';
        return;
      }

      if (data) {
        console.log('‚úÖ [PROFILE] Datos cargados exitosamente:', {
          profile: data.profile,
          addressesCount: data.addresses?.length || 0,
          addresses: data.addresses
        });
        
        this.profile = data.profile;
        this.addresses = data.addresses;
        
        // Populate form
        this.profileForm = {
          full_name: data.profile.full_name || '',
          email: data.profile.email || '',
          phone: data.profile.phone || '',
          date_of_birth: data.profile.date_of_birth || ''
        };

        console.log('üìù [PROFILE] Formulario poblado:', this.profileForm);
      } else {
        console.warn('‚ö†Ô∏è [PROFILE] No se recibieron datos del perfil');
      }
    } catch (error) {
      console.error('üí• [PROFILE] Error inesperado al cargar datos:', error);
      this.error = 'Error al cargar los datos del perfil';
    } finally {
      this.loading = false;
      console.log('üèÅ [PROFILE] Carga de datos completada');
    }
  }

  async updateProfile() {
    if (!this.profile) {
      console.warn('‚ö†Ô∏è [PROFILE] No hay perfil para actualizar');
      return;
    }

    console.log('üîÑ [PROFILE] Iniciando actualizaci√≥n de perfil...');
    console.log('üìù [PROFILE] Datos a actualizar:', {
      current: this.profile,
      updates: this.profileForm
    });

    this.loading = true;
    this.error = null;
    this.success = null;

    try {
      const updateData = {
        full_name: this.profileForm.full_name,
        phone: this.profileForm.phone,
        date_of_birth: this.profileForm.date_of_birth
      };

      console.log('üì° [PROFILE] Enviando actualizaci√≥n:', updateData);
      const { data, error } = await this.authService.updateProfile(updateData);

      if (error) {
        console.error('‚ùå [PROFILE] Error al actualizar perfil:', error);
        this.error = 'Error al actualizar el perfil';
        return;
      }

      console.log('‚úÖ [PROFILE] Perfil actualizado exitosamente:', data);
      this.success = 'Perfil actualizado correctamente';
      
      // Reload data to reflect changes
      console.log('üîÑ [PROFILE] Recargando datos despu√©s de actualizaci√≥n...');
      await this.loadProfileData();
    } catch (error) {
      console.error('üí• [PROFILE] Error inesperado al actualizar perfil:', error);
      this.error = 'Error al actualizar el perfil';
    } finally {
      this.loading = false;
      console.log('üèÅ [PROFILE] Actualizaci√≥n de perfil completada');
    }
  }

  // Address management methods
  openAddressForm() {
    this.showAddressForm = true;
    this.editingAddressId = null;
    this.resetAddressForm();
  }

  editAddress(address: ShippingAddress) {
    this.showAddressForm = true;
    this.editingAddressId = address.id;
    this.addressForm = {
      title: address.title,
      first_name: address.first_name,
      last_name: address.last_name,
      company: address.company || '',
      address_line_1: address.address_line_1,
      address_line_2: address.address_line_2 || '',
      city: address.city,
      state: address.state,
      postal_code: address.postal_code,
      country: address.country,
      phone: address.phone || '',
      is_default: address.is_default
    };
  }

  async saveAddress() {
    console.log('üîÑ [ADDRESS] Iniciando guardado de direcci√≥n...');
    console.log('üìù [ADDRESS] Datos de direcci√≥n:', {
      isEditing: !!this.editingAddressId,
      addressId: this.editingAddressId,
      formData: this.addressForm
    });

    this.loading = true;
    this.error = null;
    this.success = null;

    try {
      if (this.editingAddressId) {
        console.log('üì° [ADDRESS] Actualizando direcci√≥n existente...');
        // Update existing address
        const { error } = await this.authService.updateShippingAddress(
          this.editingAddressId,
          this.addressForm
        );

        if (error) {
          console.error('‚ùå [ADDRESS] Error al actualizar direcci√≥n:', error);
          this.error = 'Error al actualizar la direcci√≥n';
          return;
        }

        console.log('‚úÖ [ADDRESS] Direcci√≥n actualizada exitosamente');
        this.success = 'Direcci√≥n actualizada correctamente';
      } else {
        console.log('üì° [ADDRESS] Creando nueva direcci√≥n...');
        // Create new address
        const { error } = await this.authService.createShippingAddress(this.addressForm);

        if (error) {
          console.error('‚ùå [ADDRESS] Error al crear direcci√≥n:', error);
          this.error = 'Error al crear la direcci√≥n';
          return;
        }

        console.log('‚úÖ [ADDRESS] Direcci√≥n creada exitosamente');
        this.success = 'Direcci√≥n creada correctamente';
      }

      this.showAddressForm = false;
      console.log('üîÑ [ADDRESS] Recargando datos despu√©s de guardar...');
      await this.loadProfileData();
    } catch (error) {
      console.error('üí• [ADDRESS] Error inesperado al guardar direcci√≥n:', error);
      this.error = 'Error al guardar la direcci√≥n';
    } finally {
      this.loading = false;
      console.log('üèÅ [ADDRESS] Guardado de direcci√≥n completado');
    }
  }

  async deleteAddress(addressId: string) {
    console.log('üîÑ [ADDRESS] Iniciando eliminaci√≥n de direcci√≥n:', addressId);
    
    if (!confirm('¬øEst√°s seguro de que quieres eliminar esta direcci√≥n?')) {
      console.log('‚ùå [ADDRESS] Eliminaci√≥n cancelada por el usuario');
      return;
    }

    this.loading = true;
    this.error = null;
    this.success = null;

    try {
      console.log('üì° [ADDRESS] Enviando solicitud de eliminaci√≥n...');
      const { error } = await this.authService.deleteShippingAddress(addressId);

      if (error) {
        console.error('‚ùå [ADDRESS] Error al eliminar direcci√≥n:', error);
        this.error = 'Error al eliminar la direcci√≥n';
        return;
      }

      console.log('‚úÖ [ADDRESS] Direcci√≥n eliminada exitosamente');
      this.success = 'Direcci√≥n eliminada correctamente';
      
      console.log('üîÑ [ADDRESS] Recargando datos despu√©s de eliminar...');
      await this.loadProfileData();
    } catch (error) {
      console.error('üí• [ADDRESS] Error inesperado al eliminar direcci√≥n:', error);
      this.error = 'Error al eliminar la direcci√≥n';
    } finally {
      this.loading = false;
      console.log('üèÅ [ADDRESS] Eliminaci√≥n de direcci√≥n completada');
    }
  }

  async setDefaultAddress(addressId: string) {
    console.log('üîÑ [ADDRESS] Estableciendo direcci√≥n por defecto:', addressId);
    
    this.loading = true;
    this.error = null;
    this.success = null;

    try {
      console.log('üì° [ADDRESS] Enviando solicitud de direcci√≥n por defecto...');
      const { error } = await this.authService.setDefaultShippingAddress(addressId);

      if (error) {
        console.error('‚ùå [ADDRESS] Error al establecer direcci√≥n por defecto:', error);
        this.error = 'Error al establecer direcci√≥n por defecto';
        return;
      }

      console.log('‚úÖ [ADDRESS] Direcci√≥n por defecto establecida exitosamente');
      this.success = 'Direcci√≥n por defecto actualizada';
      
      console.log('üîÑ [ADDRESS] Recargando datos despu√©s de establecer por defecto...');
      await this.loadProfileData();
    } catch (error) {
      console.error('üí• [ADDRESS] Error inesperado al establecer direcci√≥n por defecto:', error);
      this.error = 'Error al establecer direcci√≥n por defecto';
    } finally {
      this.loading = false;
      console.log('üèÅ [ADDRESS] Establecimiento de direcci√≥n por defecto completado');
    }
  }

  cancelAddressForm() {
    this.showAddressForm = false;
    this.editingAddressId = null;
    this.resetAddressForm();
  }

  private resetAddressForm() {
    console.log('üîÑ [ADDRESS] Reseteando formulario de direcci√≥n...');
    this.addressForm = {
      title: '',
      first_name: '',
      last_name: '',
      company: '',
      address_line_1: '',
      address_line_2: '',
      city: '',
      state: '',
      postal_code: '',
      country: 'Espa√±a', // Default to Spain but allow selection
      phone: '',
      is_default: false
    };
    console.log('‚úÖ [ADDRESS] Formulario reseteado');
  }

  // Utility methods
  clearMessages() {
    this.error = null;
    this.success = null;
  }

  setActiveTab(tab: 'personal' | 'addresses' | 'orders') {
    this.activeTab = tab;
    this.clearMessages();
  }

  getDefaultAddress(): ShippingAddress | null {
    return this.addresses.find(addr => addr.is_default) || null;
  }

  formatAddress(address: ShippingAddress): string {
    let formatted = `${address.address_line_1}`;
    if (address.address_line_2) {
      formatted += `, ${address.address_line_2}`;
    }
    formatted += `, ${address.city}, ${address.state} ${address.postal_code}, ${address.country}`;
    return formatted;
  }

  // Navigation methods
  goToOrders() {
    this.router.navigate(['/orders']);
  }

  // Get states/provinces for selected country
  getStatesForCountry(country: string): string[] {
    return this.statesByCountry[country] || [];
  }

  // Check if country has predefined states
  hasStatesForCountry(country: string): boolean {
    return this.statesByCountry.hasOwnProperty(country) && this.statesByCountry[country].length > 0;
  }

  // Handle country change in address form
  onCountryChange() {
    console.log('üîÑ [ADDRESS] Pa√≠s cambiado a:', this.addressForm.country);
    // Reset state when country changes
    this.addressForm.state = '';
    console.log('‚úÖ [ADDRESS] Estado/Provincia reseteado');
  }
} 